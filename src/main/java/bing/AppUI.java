package bing;

import bing.thread.CacheThread;
import bing.cache.VisitCache;
import bing.log.JTextAreaLogAppender;
import bing.thread.GetRequestThread;
import bing.ui.JListExtend;
import bing.ui.ThemeUI;
import bing.util.ExceptionUtils;
import bing.util.HttpClientUtils;
import bing.util.ThemeUtils;
import exception.OperationException;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.apache.commons.lang3.StringUtils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 惠下单®接口调试客户端
 *
 * @author IceWee
 */
public class AppUI extends javax.swing.JFrame {

    private static final Logger LOGGER = LoggerFactory.getLogger(AppUI.class);
    private static final ImageIcon APP_ICON;
    private static final ImageIcon THEME_ICON;
    private static JTextAreaLogAppender logThread; // 日志线程
    private static CacheThread cacheThread; // 缓存线程
    private static GetRequestThread getRequestThread; // GET请求线程
    private ThemeUI themeUI;

    static {
        APP_ICON = new ImageIcon(AppUI.class.getResource(Constants.ICON_APP_PATH));
        THEME_ICON = new ImageIcon(AppUI.class.getResource(Constants.ICON_THEME_PATH));
    }

    /**
     * Creates new form AppUI
     */
    public AppUI() {
        initComponents(); // 初始化组件
        initCopyright(); // 初始化版权
        initLogConsole(); // 初始化log4j日志输出控制台
        initCacheThread(); // 初始化缓存线程
        initThemeUI(); // 初始化主题选择框
        LOGGER.info("感谢使用 惠下单®接口调试客户端");
    }

    /**
     * 初始化主题选择框
     */
    private void initThemeUI() {
        themeUI = new ThemeUI(this);
        int x = (int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() - themeUI.getWidth()) / 2;
        int y = (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() - themeUI.getHeight()) / 2;
        themeUI.setLocation(x, y);
    }

    /**
     * 显示主题弹出框
     */
    private void showThemeUI() {
        themeUI.setVisible(true);
    }

    /**
     * 初始化日志控制台
     */
    private void initLogConsole() {
        try {
            // 说明：gui对应log4j.properties中的配置，是appender的名称
            if (logThread != null) {
                logThread.setRun(false);
                logThread = null;
            }
            logThread = new JTextAreaLogAppender("gui", this.console, this.logScrollPane);
            logThread.start();
        } catch (OperationException e) {
            LOGGER.error(e.getMessage());
        } catch (Exception e) {
            LOGGER.debug(ExceptionUtils.createExceptionString(e));
            LOGGER.error("初始化日志控制台失败，详情查看日志");
        }
    }

    /**
     * 初始化缓存线程
     */
    private void initCacheThread() {
        try {
            if (cacheThread != null) {
                cacheThread = null;
            }
            cacheThread = new CacheThread(this);
            cacheThread.start();
        } catch (OperationException e) {
            LOGGER.error(e.getMessage());
        } catch (Exception e) {
            LOGGER.debug(ExceptionUtils.createExceptionString(e));
            LOGGER.error("初始化缓存失败，详情查看日志");
        }
    }

    /**
     * 初始化版权
     */
    private void initCopyright() {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        this.copyrightLabel.setText("© " + year + " IceWee");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        urlPanel = new javax.swing.JPanel();
        urlLabel = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        urlScrollPane = new javax.swing.JScrollPane();
        visitList = new bing.ui.JListExtend(this);
        urlTextField = new javax.swing.JTextField();
        reqPanel = new javax.swing.JPanel();
        reqScrollPane = new javax.swing.JScrollPane();
        reqTextAreaExt = new bing.ui.JTextAreaExt();
        resPanel = new javax.swing.JPanel();
        resScrollPane = new javax.swing.JScrollPane();
        resTextAreaExt = new bing.ui.JTextAreaExt();
        logPanel = new javax.swing.JPanel();
        logScrollPane = new javax.swing.JScrollPane();
        console = new bing.ui.JTextAreaExt();
        copyrightPanel = new javax.swing.JPanel();
        copyrightLabel = new javax.swing.JLabel();
        themeLabel = new javax.swing.JLabel(THEME_ICON);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("惠下单©接口调试客户端");

        urlLabel.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        urlLabel.setText("请求地址");

        sendButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        sendButton.setText("发  送");
        sendButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        visitList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                visitListMouseClicked(evt);
            }
        });
        urlScrollPane.setViewportView(visitList);

        javax.swing.GroupLayout urlPanelLayout = new javax.swing.GroupLayout(urlPanel);
        urlPanel.setLayout(urlPanelLayout);
        urlPanelLayout.setHorizontalGroup(
            urlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(urlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(urlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(urlPanelLayout.createSequentialGroup()
                        .addComponent(urlLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(urlTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton))
                    .addComponent(urlScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1010, Short.MAX_VALUE))
                .addContainerGap())
        );
        urlPanelLayout.setVerticalGroup(
            urlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(urlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(urlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlLabel)
                    .addComponent(sendButton)
                    .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(urlScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reqPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "请求参数", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 14))); // NOI18N

        reqTextAreaExt.setColumns(20);
        reqTextAreaExt.setRows(5);
        reqScrollPane.setViewportView(reqTextAreaExt);

        javax.swing.GroupLayout reqPanelLayout = new javax.swing.GroupLayout(reqPanel);
        reqPanel.setLayout(reqPanelLayout);
        reqPanelLayout.setHorizontalGroup(
            reqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reqScrollPane)
        );
        reqPanelLayout.setVerticalGroup(
            reqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reqScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );

        resPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "返回结果", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 14))); // NOI18N

        resTextAreaExt.setColumns(20);
        resTextAreaExt.setRows(5);
        resScrollPane.setViewportView(resTextAreaExt);

        javax.swing.GroupLayout resPanelLayout = new javax.swing.GroupLayout(resPanel);
        resPanel.setLayout(resPanelLayout);
        resPanelLayout.setHorizontalGroup(
            resPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resScrollPane)
        );
        resPanelLayout.setVerticalGroup(
            resPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
        );

        logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "运行日志", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 14))); // NOI18N

        console.setColumns(20);
        console.setRows(5);
        logScrollPane.setViewportView(console);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScrollPane)
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );

        copyrightLabel.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        copyrightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        copyrightLabel.setText("© 2017 IceWee");

        themeLabel.setToolTipText("更换主题");
        themeLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        themeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        themeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                themeLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout copyrightPanelLayout = new javax.swing.GroupLayout(copyrightPanel);
        copyrightPanel.setLayout(copyrightPanelLayout);
        copyrightPanelLayout.setHorizontalGroup(
            copyrightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(copyrightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(themeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(copyrightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        copyrightPanelLayout.setVerticalGroup(
            copyrightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, copyrightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(copyrightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(themeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(urlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(reqPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(resPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(copyrightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(urlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reqPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyrightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 发送请求
     *
     * @param evt
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String url = StringUtils.trim(this.urlTextField.getText());
        String req = StringUtils.trim(this.reqTextAreaExt.getText());
        sendGetRequest(url, req);
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * 鼠标单击访问历史列表
     *
     * @param evt
     */
    private void visitListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visitListMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) { // 鼠标单击
            VisitCache visitCache = (VisitCache) this.visitList.getSelectedValue();
            if (visitCache != null) {
                this.urlTextField.setText(visitCache.getUrl());
                this.reqTextAreaExt.setText(visitCache.getReq());
            }
        }
    }//GEN-LAST:event_visitListMouseClicked

    private void themeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_themeLabelMouseClicked
        showThemeUI();
    }//GEN-LAST:event_themeLabelMouseClicked

    /**
     * 获得访问历史列表
     *
     * @return
     */
    public JListExtend getVisitList() {
        return visitList;
    }

    /**
     * 发送按钮是否可用
     *
     * @param enable
     */
    public void sendButtonEnable(boolean enable) {
        this.sendButton.setEnabled(enable);
    }

    /**
     * 启动GET请求线程
     *
     * @param url
     * @param req
     */
    public void sendGetRequest(String url, String req) {
        boolean urlValid = HttpClientUtils.isUrlValid(url);
        if (!urlValid) {
            JOptionPane.showMessageDialog(this, "请求地址有误", "警告信息", JOptionPane.WARNING_MESSAGE);
            return;
        }
        sendButtonEnable(false);
        try {
            if (getRequestThread == null) {
                getRequestThread = new GetRequestThread(this, url, req, true);
                getRequestThread.start();
            } else {
                getRequestThread.sendRequest(url, req);
            }
        } catch (Exception e) {
            LOGGER.debug(ExceptionUtils.createExceptionString(e));
            LOGGER.error("创建GET请求线程失败，详情查看日志");
        }

    }

    /**
     * 刷新返回结果
     *
     * @param res
     */
    public void refreshRes(String res) {
        if (StringUtils.isNotBlank(res)) {
            this.resTextAreaExt.setText(res);
        }
    }

    /**
     * GET请求线程回调
     *
     * @param url
     * @param req
     * @param res
     */
    public void getRequestCallback(String url, String req, String res) {
        refreshRes(res);
        cache(url, req);
    }

    /**
     * 缓存访问历史
     *
     * @param url
     * @param req
     */
    public void cache(String url, String req) {
        try {
            VisitCache cache = new VisitCache(url, req);
            cacheThread.addCache(cache);
        } catch (OperationException e) {
            LOGGER.error(e.getMessage());
        } catch (Exception e) {
            LOGGER.debug(ExceptionUtils.createExceptionString(e));
            LOGGER.error("缓存访问历史失败，详情查看日志");
        }
    }

    /**
     * 删除访问历史
     *
     * @param url
     */
    public void removeCache(String url) {
        try {
            VisitCache cache = new VisitCache(url);
            cacheThread.removeCache(cache);
        } catch (OperationException e) {
            LOGGER.error(e.getMessage());
        } catch (Exception e) {
            LOGGER.debug(ExceptionUtils.createExceptionString(e));
            LOGGER.error("删除访问历史失败，详情查看日志");
        }
    }

    /**
     * 删除访问历史
     *
     */
    public void clearCache() {
        try {
            cacheThread.clearCache();
        } catch (OperationException e) {
            LOGGER.error(e.getMessage());
        } catch (Exception e) {
            LOGGER.debug(ExceptionUtils.createExceptionString(e));
            LOGGER.error("清空访问历史失败，详情查看日志");
        }
    }

    /**
     * 程序入口
     */
    public static void main(String args[]) {
        // 设置主题风格
        initTheme();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AppUI app = new AppUI();
                app.setIconImage(APP_ICON.getImage());
                int w = (int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() - app.getWidth()) / 2;
                int h = (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() - app.getHeight()) / 2;
                app.setLocation(w, h);
                app.setVisible(true);
            }
        });
    }

    /**
     * 设置主题风格
     */
    private static void initTheme() {
        String themeName = ThemeUtils.getCustomThemeFullName();
        if (StringUtils.isBlank(themeName)) {
            setDefaultTheme();
        } else {
            try {
                UIManager.setLookAndFeel(themeName);
            } catch (Exception e) {
                String error = ExceptionUtils.createExceptionString(e);
                LOGGER.debug("设置主题时出现了异常\n{}", error);
                setDefaultTheme();
            }
        }
    }

    /**
     * 设置默认主题风格
     */
    public static void setDefaultTheme() {
        try {
            UIManager.setLookAndFeel(ThemeUtils.getDefaultThemeFullName());
        } catch (Exception ex) {
            String errorx = ExceptionUtils.createExceptionString(ex);
            LOGGER.debug("设置主题时出现了异常\n{}", errorx);
        }
    }

    /**
     * 设置自定义主题风格
     *
     * @param themeShortName
     */
    public void setCustomTheme(String themeShortName) {
        try {
            String themeName = ThemeUtils.getThemeFullName(themeShortName);
            UIManager.setLookAndFeel(themeName);
            ThemeUtils.saveCustomTheme(themeShortName);
        } catch (Exception e) {
            String error = ExceptionUtils.createExceptionString(e);
            LOGGER.debug("设置主题时出现了异常\n{}", error);
        }
    }

    /**
     * 获取主题标签
     *
     * @return
     */
    public JLabel getThemeLabel() {
        return this.themeLabel;
    }

    @Override
    protected void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) { // 处理Jframe关闭事件
            this.themeUI.dispose();
            this.dispose();
            System.exit(0);
        } else {
            super.processWindowEvent(e); // 忽略其他事件，交给JFrame处理
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private bing.ui.JTextAreaExt console;
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.JPanel copyrightPanel;
    private javax.swing.JPanel logPanel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JPanel reqPanel;
    private javax.swing.JScrollPane reqScrollPane;
    private bing.ui.JTextAreaExt reqTextAreaExt;
    private javax.swing.JPanel resPanel;
    private javax.swing.JScrollPane resScrollPane;
    private bing.ui.JTextAreaExt resTextAreaExt;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel themeLabel;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JPanel urlPanel;
    private javax.swing.JScrollPane urlScrollPane;
    private javax.swing.JTextField urlTextField;
    private bing.ui.JListExtend visitList;
    // End of variables declaration//GEN-END:variables
}
